// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	model "lab3/model"

	mock "github.com/stretchr/testify/mock"
)

// IDB is an autogenerated mock type for the IDB type
type IDB struct {
	mock.Mock
}

// CreateBoard provides a mock function with given fields: board
func (_m *IDB) CreateBoard(board model.Board) error {
	ret := _m.Called(board)

	if len(ret) == 0 {
		panic("no return value specified for CreateBoard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Board) error); ok {
		r0 = rf(board)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: user
func (_m *IDB) CreateUser(user model.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllBoards provides a mock function with given fields:
func (_m *IDB) FindAllBoards() ([]model.Board, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAllBoards")
	}

	var r0 []model.Board
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Board, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Board); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Board)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBoardById provides a mock function with given fields: id
func (_m *IDB) FindBoardById(id string) (model.Board, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindBoardById")
	}

	var r0 model.Board
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.Board, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) model.Board); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Board)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByLogin provides a mock function with given fields: login
func (_m *IDB) FindUserByLogin(login string) (model.User, error) {
	ret := _m.Called(login)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByLogin")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.User, error)); ok {
		return rf(login)
	}
	if rf, ok := ret.Get(0).(func(string) model.User); ok {
		r0 = rf(login)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIDB creates a new instance of IDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDB {
	mock := &IDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
