// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	model "lab3/model"

	mock "github.com/stretchr/testify/mock"
)

// IUserRepository is an autogenerated mock type for the IUserRepository type
type IUserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: userDto
func (_m *IUserRepository) CreateUser(userDto model.UserDto) error {
	ret := _m.Called(userDto)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.UserDto) error); ok {
		r0 = rf(userDto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByLogin provides a mock function with given fields: login
func (_m *IUserRepository) GetByLogin(login string) (model.User, error) {
	ret := _m.Called(login)

	if len(ret) == 0 {
		panic("no return value specified for GetByLogin")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.User, error)); ok {
		return rf(login)
	}
	if rf, ok := ret.Get(0).(func(string) model.User); ok {
		r0 = rf(login)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUserRepository creates a new instance of IUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserRepository {
	mock := &IUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
