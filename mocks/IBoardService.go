// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	model "lab3/model"

	mock "github.com/stretchr/testify/mock"
)

// IBoardService is an autogenerated mock type for the IBoardService type
type IBoardService struct {
	mock.Mock
}

// GetAllBoards provides a mock function with given fields:
func (_m *IBoardService) GetAllBoards() ([]model.BoardDto, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllBoards")
	}

	var r0 []model.BoardDto
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.BoardDto, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.BoardDto); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.BoardDto)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBoardById provides a mock function with given fields: id
func (_m *IBoardService) GetBoardById(id string) (model.BoardDto, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBoardById")
	}

	var r0 model.BoardDto
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.BoardDto, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) model.BoardDto); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.BoardDto)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeCalculations provides a mock function with given fields: boardDto
func (_m *IBoardService) MakeCalculations(boardDto model.BoardDto) (model.BoardWrapper, error) {
	ret := _m.Called(boardDto)

	if len(ret) == 0 {
		panic("no return value specified for MakeCalculations")
	}

	var r0 model.BoardWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(model.BoardDto) (model.BoardWrapper, error)); ok {
		return rf(boardDto)
	}
	if rf, ok := ret.Get(0).(func(model.BoardDto) model.BoardWrapper); ok {
		r0 = rf(boardDto)
	} else {
		r0 = ret.Get(0).(model.BoardWrapper)
	}

	if rf, ok := ret.Get(1).(func(model.BoardDto) error); ok {
		r1 = rf(boardDto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIBoardService creates a new instance of IBoardService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBoardService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBoardService {
	mock := &IBoardService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
